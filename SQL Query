-- Use the Movies database
USE Movies;

-- Display all tables in the database
SHOW TABLES;

-- Retrieve all records from the MOVIES table
SELECT *
FROM MOVIES;

-- Calculate the average runtime of all movies
SELECT AVG(RUNTIME)  -- avg value display : 137.2889 
FROM MOVIES;

-- Attempt to update NULL runtimes (unsafe without key)
UPDATE MOVIES  -- where ke saath koi key like ID nhi use kr rhe to wo safe update nhi hua
SET RUNTIME = 137.2889 
WHERE RUNTIME IS NULL; 				

-- Disable SQL safe updates to allow updates without WHERE key
SET SQL_SAFE_UPDATES = 0;  -- pehle sql safe update feature ko off karo 

-- Fill all NULL values in the runtime column with the average runtime
UPDATE MOVIES  -- runtime column ke saare null values mei avg(runtime) fill hoga 
SET RUNTIME = 137.2889  -- "Handling NULL Values concept"
WHERE RUNTIME IS NULL;

-- Delete rows where release_date is NULL
DELETE FROM MOVIES					
WHERE release_date IS NULL;  -- release date column ke null values removed

-- Data cleaning on genres column

-- Remove open square brackets
UPDATE MOVIES									
SET genres = REPLACE(genres, '[', '');  -- open square bracket removed

-- Remove closed square brackets
UPDATE MOVIES
SET genres = REPLACE(genres, ']', '');  -- closed square bracket removed

-- Remove the 'id' key
UPDATE MOVIES 
SET genres = REPLACE(genres, '{"id":', '');  -- id key removed

-- Remove the 'name' key
UPDATE MOVIES
SET genres = REPLACE(genres, '{"name":', '');  -- name key removed

-- Remove curly braces and stray quotes
UPDATE MOVIES 
SET genres = REPLACE(REPLACE(genres, '}', ''), '"', '');  -- curly braces } and stray quotes " removed

-- Replace temporary pipe separator '|' with comma
UPDATE MOVIES 
SET genres = REPLACE(genres, '|', ', ');  -- temp separator | removed by comma separator ,

-- Preview top 10 movie titles with cleaned genres
SELECT title, genres 
FROM MOVIES 
LIMIT 10;  -- top 10 rows to check

-- Re-enable SQL safe updates
SET SQL_SAFE_UPDATES = 1;  -- safe update on

-- ===============================================
-- Data Cleaning and Preparation for Visualization
-- ===============================================

-- Add a new column release_year for easier analysis in Tableau
ALTER TABLE movies ADD COLUMN release_year INT;  -- Tableau works better with year instead of full date

-- Populate release_year from release_date
UPDATE movies
SET release_year = YEAR(release_date);  -- extract year from full date

-- Handle NULL values in vote_average column
SELECT AVG(vote_average) FROM movies;  -- avg vote_average: 6.522222222222224

UPDATE movies
SET vote_average = 6.522222222222224
WHERE vote_average IS NULL;  -- fill NULLs with average

-- Handle NULL values in popularity column
SELECT AVG(popularity) FROM movies;  -- avg popularity: 94.30892246666667

UPDATE movies
SET popularity = 94.30892246666667
WHERE popularity IS NULL;  -- fill NULLs with average

-- Create a clean version of the movies table for analysis
CREATE TABLE movies_clean AS
SELECT 
    'Movie ID' AS movie_id,  -- avoid spaces in column names for Excel/BI tools
    Title AS title,
    Genres AS genres,
    Release_Date AS release_year,
    Vote_Average AS rating,
    Popularity AS popularity,
    Runtime AS runtime
FROM movies;

-- Preview the first 10 rows of the cleaned table
SELECT * 
FROM movies_clean  
LIMIT 10;

-- ===============================================
-- Analysis Queries
-- ===============================================

-- 1. Top 10 Movies by Rating
SELECT title, rating, release_year
FROM movies_clean
ORDER BY rating DESC
LIMIT 10;

-- 2. Top 10 Movies by Genre (Example: Comedy)
SELECT title, rating, release_year
FROM movies_clean
WHERE genres LIKE '%COMEDY%'  -- filter for movies containing 'COMEDY'
ORDER BY rating DESC
LIMIT 10;

-- 3. Average Rating by Genre
SELECT genres, ROUND(AVG(rating), 2) AS avg_rating  -- rounded to 2 decimal places for readability
FROM movies_clean
GROUP BY genres
ORDER BY avg_rating DESC;

-- 4. Movies Released per Year
SELECT release_year, COUNT(*) AS movies_count
FROM movies_clean
GROUP BY release_year
ORDER BY release_year;

-- Preview the entire cleaned movies table (optional)
SELECT * 
FROM movies_clean;
